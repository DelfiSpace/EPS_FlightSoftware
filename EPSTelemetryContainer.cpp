//File Generated By TelemetryFromXTCE.py

#include "EPSTelemetryContainer.h"

int EPSTelemetryContainer::size()
{
    return EPS_CONTAINER_SIZE;
}

unsigned char* EPSTelemetryContainer::getArray()
{
    return &telemetry[0];
}

char EPSTelemetryContainer::getStatus()
{
    return telemetry[0];
}
void EPSTelemetryContainer::setStatus(char uchar)
{
    telemetry[0] = uchar;
}
char EPSTelemetryContainer::getBootCounter()
{
    return telemetry[1];
}
void EPSTelemetryContainer::setBootCounter(char uchar)
{
    telemetry[1] = uchar;
}
long EPSTelemetryContainer::getResetCause()
{
    unsigned long ulong;
    ((unsigned char *)&ulong)[2] = telemetry[2];
    ((unsigned char *)&ulong)[1] = telemetry[3];
    ((unsigned char *)&ulong)[0] = telemetry[4];
    return ulong;
}
void EPSTelemetryContainer::setResetCause(long ulong)
{
    telemetry[2] = ((unsigned char *)&ulong)[2];
    telemetry[3] = ((unsigned char *)&ulong)[1];
    telemetry[4] = ((unsigned char *)&ulong)[0];
}
unsigned long EPSTelemetryContainer::getUptime()
{
    unsigned long ulong;
    ((unsigned char *)&ulong)[3] = telemetry[5];
    ((unsigned char *)&ulong)[2] = telemetry[6];
    ((unsigned char *)&ulong)[1] = telemetry[7];
    ((unsigned char *)&ulong)[0] = telemetry[8];
    return ulong;
}
void EPSTelemetryContainer::setUptime(unsigned long ulong)
{
    telemetry[5] = ((unsigned char *)&ulong)[3];
    telemetry[6] = ((unsigned char *)&ulong)[2];
    telemetry[7] = ((unsigned char *)&ulong)[1];
    telemetry[8] = ((unsigned char *)&ulong)[0];
}
unsigned long EPSTelemetryContainer::getTotalUptime()
{
    unsigned long ulong;
    ((unsigned char *)&ulong)[3] = telemetry[9];
    ((unsigned char *)&ulong)[2] = telemetry[10];
    ((unsigned char *)&ulong)[1] = telemetry[11];
    ((unsigned char *)&ulong)[0] = telemetry[12];
    return ulong;
}
void EPSTelemetryContainer::setTotalUptime(unsigned long ulong)
{
    telemetry[9] = ((unsigned char *)&ulong)[3];
    telemetry[10] = ((unsigned char *)&ulong)[2];
    telemetry[11] = ((unsigned char *)&ulong)[1];
    telemetry[12] = ((unsigned char *)&ulong)[0];
}
char EPSTelemetryContainer::getVersionNumber()
{
    return telemetry[13];
}
void EPSTelemetryContainer::setVersionNumber(char uchar)
{
    telemetry[13] = uchar;
}
short EPSTelemetryContainer::getMCUTemp()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[14];
    ((unsigned char *)&ushort)[0] = telemetry[15];
    return ushort;
}
void EPSTelemetryContainer::setMCUTemp(short ushort)
{
    telemetry[14] = ((unsigned char *)&ushort)[1];
    telemetry[15] = ((unsigned char *)&ushort)[0];
}
bool EPSTelemetryContainer::getBATTERY_INA_STATUS()
{
    return ((telemetry[16] & 0x80) != 0);
}
void EPSTelemetryContainer::setBATTERY_INA_STATUS(bool bval)
{
    telemetry[16] &= (~0x80);
    telemetry[16] |= bval ? 0x80 : 0x00;
}
bool EPSTelemetryContainer::getBATTERY_GG_STATUS()
{
    return ((telemetry[16] & 0x40) != 0);
}
void EPSTelemetryContainer::setBATTERY_GG_STATUS(bool bval)
{
    telemetry[16] &= (~0x40);
    telemetry[16] |= bval ? 0x40 : 0x00;
}
bool EPSTelemetryContainer::getINTERNAL_INA_STATUS()
{
    return ((telemetry[16] & 0x20) != 0);
}
void EPSTelemetryContainer::setINTERNAL_INA_STATUS(bool bval)
{
    telemetry[16] &= (~0x20);
    telemetry[16] |= bval ? 0x20 : 0x00;
}
bool EPSTelemetryContainer::getUNREGULATED_INA_STATUS()
{
    return ((telemetry[16] & 0x10) != 0);
}
void EPSTelemetryContainer::setUNREGULATED_INA_STATUS(bool bval)
{
    telemetry[16] &= (~0x10);
    telemetry[16] |= bval ? 0x10 : 0x00;
}
bool EPSTelemetryContainer::getBUS1_INA_STATUS()
{
    return ((telemetry[16] & 0x08) != 0);
}
void EPSTelemetryContainer::setBUS1_INA_STATUS(bool bval)
{
    telemetry[16] &= (~0x08);
    telemetry[16] |= bval ? 0x08 : 0x00;
}
bool EPSTelemetryContainer::getBUS2_INA_STATUS()
{
    return ((telemetry[16] & 0x04) != 0);
}
void EPSTelemetryContainer::setBUS2_INA_STATUS(bool bval)
{
    telemetry[16] &= (~0x04);
    telemetry[16] |= bval ? 0x04 : 0x00;
}
bool EPSTelemetryContainer::getBUS3_INA_STATUS()
{
    return ((telemetry[16] & 0x02) != 0);
}
void EPSTelemetryContainer::setBUS3_INA_STATUS(bool bval)
{
    telemetry[16] &= (~0x02);
    telemetry[16] |= bval ? 0x02 : 0x00;
}
bool EPSTelemetryContainer::getBUS4_INA_STATUS()
{
    return ((telemetry[16] & 0x01) != 0);
}
void EPSTelemetryContainer::setBUS4_INA_STATUS(bool bval)
{
    telemetry[16] &= (~0x01);
    telemetry[16] |= bval ? 0x01 : 0x00;
}
bool EPSTelemetryContainer::getBUS4_ERROR()
{
    return ((telemetry[17] & 0x80) != 0);
}
void EPSTelemetryContainer::setBUS4_ERROR(bool bval)
{
    telemetry[17] &= (~0x80);
    telemetry[17] |= bval ? 0x80 : 0x00;
}
bool EPSTelemetryContainer::getBUS3_ERROR()
{
    return ((telemetry[17] & 0x40) != 0);
}
void EPSTelemetryContainer::setBUS3_ERROR(bool bval)
{
    telemetry[17] &= (~0x40);
    telemetry[17] |= bval ? 0x40 : 0x00;
}
bool EPSTelemetryContainer::getBUS2_ERROR()
{
    return ((telemetry[17] & 0x20) != 0);
}
void EPSTelemetryContainer::setBUS2_ERROR(bool bval)
{
    telemetry[17] &= (~0x20);
    telemetry[17] |= bval ? 0x20 : 0x00;
}
bool EPSTelemetryContainer::getBUS1_ERROR()
{
    return ((telemetry[17] & 0x10) != 0);
}
void EPSTelemetryContainer::setBUS1_ERROR(bool bval)
{
    telemetry[17] &= (~0x10);
    telemetry[17] |= bval ? 0x10 : 0x00;
}
bool EPSTelemetryContainer::getBUS4_STATE()
{
    return ((telemetry[17] & 0x08) != 0);
}
void EPSTelemetryContainer::setBUS4_STATE(bool bval)
{
    telemetry[17] &= (~0x08);
    telemetry[17] |= bval ? 0x08 : 0x00;
}
bool EPSTelemetryContainer::getBUS3_STATE()
{
    return ((telemetry[17] & 0x04) != 0);
}
void EPSTelemetryContainer::setBUS3_STATE(bool bval)
{
    telemetry[17] &= (~0x04);
    telemetry[17] |= bval ? 0x04 : 0x00;
}
bool EPSTelemetryContainer::getBUS2_STATE()
{
    return ((telemetry[17] & 0x02) != 0);
}
void EPSTelemetryContainer::setBUS2_STATE(bool bval)
{
    telemetry[17] &= (~0x02);
    telemetry[17] |= bval ? 0x02 : 0x00;
}
bool EPSTelemetryContainer::getBUS1_STATE()
{
    return ((telemetry[17] & 0x01) != 0);
}
void EPSTelemetryContainer::setBUS1_STATE(bool bval)
{
    telemetry[17] &= (~0x01);
    telemetry[17] |= bval ? 0x01 : 0x00;
}
bool EPSTelemetryContainer::getCELLOUT_YP_INA_STATUS()
{
    return ((telemetry[18] & 0x80) != 0);
}
void EPSTelemetryContainer::setCELLOUT_YP_INA_STATUS(bool bval)
{
    telemetry[18] &= (~0x80);
    telemetry[18] |= bval ? 0x80 : 0x00;
}
bool EPSTelemetryContainer::getCELLOUT_YM_INA_STATUS()
{
    return ((telemetry[18] & 0x40) != 0);
}
void EPSTelemetryContainer::setCELLOUT_YM_INA_STATUS(bool bval)
{
    telemetry[18] &= (~0x40);
    telemetry[18] |= bval ? 0x40 : 0x00;
}
bool EPSTelemetryContainer::getCELLOUT_XP_INA_STATUS()
{
    return ((telemetry[18] & 0x20) != 0);
}
void EPSTelemetryContainer::setCELLOUT_XP_INA_STATUS(bool bval)
{
    telemetry[18] &= (~0x20);
    telemetry[18] |= bval ? 0x20 : 0x00;
}
bool EPSTelemetryContainer::getCELLOUT_XM_INA_STATUS()
{
    return ((telemetry[18] & 0x10) != 0);
}
void EPSTelemetryContainer::setCELLOUT_XM_INA_STATUS(bool bval)
{
    telemetry[18] &= (~0x10);
    telemetry[18] |= bval ? 0x10 : 0x00;
}
bool EPSTelemetryContainer::getCELLOUT_YP_TMP_STATUS()
{
    return ((telemetry[18] & 0x08) != 0);
}
void EPSTelemetryContainer::setCELLOUT_YP_TMP_STATUS(bool bval)
{
    telemetry[18] &= (~0x08);
    telemetry[18] |= bval ? 0x08 : 0x00;
}
bool EPSTelemetryContainer::getCELLOUT_YM_TMP_STATUS()
{
    return ((telemetry[18] & 0x04) != 0);
}
void EPSTelemetryContainer::setCELLOUT_YM_TMP_STATUS(bool bval)
{
    telemetry[18] &= (~0x04);
    telemetry[18] |= bval ? 0x04 : 0x00;
}
bool EPSTelemetryContainer::getCELLOUT_XP_TMP_STATUS()
{
    return ((telemetry[18] & 0x02) != 0);
}
void EPSTelemetryContainer::setCELLOUT_XP_TMP_STATUS(bool bval)
{
    telemetry[18] &= (~0x02);
    telemetry[18] |= bval ? 0x02 : 0x00;
}
bool EPSTelemetryContainer::getCELLOUT_XM_TMP_STATUS()
{
    return ((telemetry[18] & 0x01) != 0);
}
void EPSTelemetryContainer::setCELLOUT_XM_TMP_STATUS(bool bval)
{
    telemetry[18] &= (~0x01);
    telemetry[18] |= bval ? 0x01 : 0x00;
}
bool EPSTelemetryContainer::getMPPT_YP_INA_STATUS()
{
    return ((telemetry[19] & 0x80) != 0);
}
void EPSTelemetryContainer::setMPPT_YP_INA_STATUS(bool bval)
{
    telemetry[19] &= (~0x80);
    telemetry[19] |= bval ? 0x80 : 0x00;
}
bool EPSTelemetryContainer::getMPPT_YM_INA_STATUS()
{
    return ((telemetry[19] & 0x40) != 0);
}
void EPSTelemetryContainer::setMPPT_YM_INA_STATUS(bool bval)
{
    telemetry[19] &= (~0x40);
    telemetry[19] |= bval ? 0x40 : 0x00;
}
bool EPSTelemetryContainer::getMPPT_XP_INA_STATUS()
{
    return ((telemetry[19] & 0x20) != 0);
}
void EPSTelemetryContainer::setMPPT_XP_INA_STATUS(bool bval)
{
    telemetry[19] &= (~0x20);
    telemetry[19] |= bval ? 0x20 : 0x00;
}
bool EPSTelemetryContainer::getMPPT_XM_INA_STATUS()
{
    return ((telemetry[19] & 0x10) != 0);
}
void EPSTelemetryContainer::setMPPT_XM_INA_STATUS(bool bval)
{
    telemetry[19] &= (~0x10);
    telemetry[19] |= bval ? 0x10 : 0x00;
}
bool EPSTelemetryContainer::getPANELOUT_YP_INA_STATUS()
{
    return ((telemetry[19] & 0x08) != 0);
}
void EPSTelemetryContainer::setPANELOUT_YP_INA_STATUS(bool bval)
{
    telemetry[19] &= (~0x08);
    telemetry[19] |= bval ? 0x08 : 0x00;
}
bool EPSTelemetryContainer::getPANELOUT_YM_INA_STATUS()
{
    return ((telemetry[19] & 0x04) != 0);
}
void EPSTelemetryContainer::setPANELOUT_YM_INA_STATUS(bool bval)
{
    telemetry[19] &= (~0x04);
    telemetry[19] |= bval ? 0x04 : 0x00;
}
bool EPSTelemetryContainer::getPANELOUT_XP_INA_STATUS()
{
    return ((telemetry[19] & 0x02) != 0);
}
void EPSTelemetryContainer::setPANELOUT_XP_INA_STATUS(bool bval)
{
    telemetry[19] &= (~0x02);
    telemetry[19] |= bval ? 0x02 : 0x00;
}
bool EPSTelemetryContainer::getPANELOUT_XM_INA_STATUS()
{
    return ((telemetry[19] & 0x01) != 0);
}
void EPSTelemetryContainer::setPANELOUT_XM_INA_STATUS(bool bval)
{
    telemetry[19] &= (~0x01);
    telemetry[19] |= bval ? 0x01 : 0x00;
}
short EPSTelemetryContainer::getINTERNAL_INA_CURRENT()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[20];
    ((unsigned char *)&ushort)[0] = telemetry[21];
    return ushort;
}
void EPSTelemetryContainer::setINTERNAL_INA_CURRENT(short ushort)
{
    telemetry[20] = ((unsigned char *)&ushort)[1];
    telemetry[21] = ((unsigned char *)&ushort)[0];
}
short EPSTelemetryContainer::getINTERNAL_INA_VOLTAGE()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[22];
    ((unsigned char *)&ushort)[0] = telemetry[23];
    return ushort;
}
void EPSTelemetryContainer::setINTERNAL_INA_VOLTAGE(short ushort)
{
    telemetry[22] = ((unsigned char *)&ushort)[1];
    telemetry[23] = ((unsigned char *)&ushort)[0];
}
short EPSTelemetryContainer::getUNREGULATED_INA_CURRENT()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[24];
    ((unsigned char *)&ushort)[0] = telemetry[25];
    return ushort;
}
void EPSTelemetryContainer::setUNREGULATED_INA_CURRENT(short ushort)
{
    telemetry[24] = ((unsigned char *)&ushort)[1];
    telemetry[25] = ((unsigned char *)&ushort)[0];
}
short EPSTelemetryContainer::getUNREGULATED_INA_VOLTAGE()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[26];
    ((unsigned char *)&ushort)[0] = telemetry[27];
    return ushort;
}
void EPSTelemetryContainer::setUNREGULATED_INA_VOLTAGE(short ushort)
{
    telemetry[26] = ((unsigned char *)&ushort)[1];
    telemetry[27] = ((unsigned char *)&ushort)[0];
}
short EPSTelemetryContainer::getBATTERY_GG_VOLTAGE()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[28];
    ((unsigned char *)&ushort)[0] = telemetry[29];
    return ushort;
}
void EPSTelemetryContainer::setBATTERY_GG_VOLTAGE(short ushort)
{
    telemetry[28] = ((unsigned char *)&ushort)[1];
    telemetry[29] = ((unsigned char *)&ushort)[0];
}
short EPSTelemetryContainer::getBATTERY_INA_VOLTAGE()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[30];
    ((unsigned char *)&ushort)[0] = telemetry[31];
    return ushort;
}
void EPSTelemetryContainer::setBATTERY_INA_VOLTAGE(short ushort)
{
    telemetry[30] = ((unsigned char *)&ushort)[1];
    telemetry[31] = ((unsigned char *)&ushort)[0];
}
short EPSTelemetryContainer::getBATTERY_INA_CURRENT()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[32];
    ((unsigned char *)&ushort)[0] = telemetry[33];
    return ushort;
}
void EPSTelemetryContainer::setBATTERY_INA_CURRENT(short ushort)
{
    telemetry[32] = ((unsigned char *)&ushort)[1];
    telemetry[33] = ((unsigned char *)&ushort)[0];
}
short EPSTelemetryContainer::getBATTERY_GG_CAPACITY()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[34];
    ((unsigned char *)&ushort)[0] = telemetry[35];
    return ushort;
}
void EPSTelemetryContainer::setBATTERY_GG_CAPACITY(short ushort)
{
    telemetry[34] = ((unsigned char *)&ushort)[1];
    telemetry[35] = ((unsigned char *)&ushort)[0];
}
short EPSTelemetryContainer::getBATTERY_GG_TEMP()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[36];
    ((unsigned char *)&ushort)[0] = telemetry[37];
    return ushort;
}
void EPSTelemetryContainer::setBATTERY_GG_TEMP(short ushort)
{
    telemetry[36] = ((unsigned char *)&ushort)[1];
    telemetry[37] = ((unsigned char *)&ushort)[0];
}
short EPSTelemetryContainer::getBATTERY_TMP20_TEMP()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[38];
    ((unsigned char *)&ushort)[0] = telemetry[39];
    return ushort;
}
void EPSTelemetryContainer::setBATTERY_TMP20_TEMP(short ushort)
{
    telemetry[38] = ((unsigned char *)&ushort)[1];
    telemetry[39] = ((unsigned char *)&ushort)[0];
}
short EPSTelemetryContainer::getBUS4_VOLTAGE()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[40];
    ((unsigned char *)&ushort)[0] = telemetry[41];
    return ushort;
}
void EPSTelemetryContainer::setBUS4_VOLTAGE(short ushort)
{
    telemetry[40] = ((unsigned char *)&ushort)[1];
    telemetry[41] = ((unsigned char *)&ushort)[0];
}
short EPSTelemetryContainer::getBUS3_VOLTAGE()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[42];
    ((unsigned char *)&ushort)[0] = telemetry[43];
    return ushort;
}
void EPSTelemetryContainer::setBUS3_VOLTAGE(short ushort)
{
    telemetry[42] = ((unsigned char *)&ushort)[1];
    telemetry[43] = ((unsigned char *)&ushort)[0];
}
short EPSTelemetryContainer::getBUS2_VOLTAGE()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[44];
    ((unsigned char *)&ushort)[0] = telemetry[45];
    return ushort;
}
void EPSTelemetryContainer::setBUS2_VOLTAGE(short ushort)
{
    telemetry[44] = ((unsigned char *)&ushort)[1];
    telemetry[45] = ((unsigned char *)&ushort)[0];
}
short EPSTelemetryContainer::getBUS1_VOLTAGE()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[46];
    ((unsigned char *)&ushort)[0] = telemetry[47];
    return ushort;
}
void EPSTelemetryContainer::setBUS1_VOLTAGE(short ushort)
{
    telemetry[46] = ((unsigned char *)&ushort)[1];
    telemetry[47] = ((unsigned char *)&ushort)[0];
}
short EPSTelemetryContainer::getBUS4_CURRENT()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[48];
    ((unsigned char *)&ushort)[0] = telemetry[49];
    return ushort;
}
void EPSTelemetryContainer::setBUS4_CURRENT(short ushort)
{
    telemetry[48] = ((unsigned char *)&ushort)[1];
    telemetry[49] = ((unsigned char *)&ushort)[0];
}
short EPSTelemetryContainer::getBUS3_CURRENT()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[50];
    ((unsigned char *)&ushort)[0] = telemetry[51];
    return ushort;
}
void EPSTelemetryContainer::setBUS3_CURRENT(short ushort)
{
    telemetry[50] = ((unsigned char *)&ushort)[1];
    telemetry[51] = ((unsigned char *)&ushort)[0];
}
short EPSTelemetryContainer::getBUS2_CURRENT()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[52];
    ((unsigned char *)&ushort)[0] = telemetry[53];
    return ushort;
}
void EPSTelemetryContainer::setBUS2_CURRENT(short ushort)
{
    telemetry[52] = ((unsigned char *)&ushort)[1];
    telemetry[53] = ((unsigned char *)&ushort)[0];
}
short EPSTelemetryContainer::getBUS1_CURRENT()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[54];
    ((unsigned char *)&ushort)[0] = telemetry[55];
    return ushort;
}
void EPSTelemetryContainer::setBUS1_CURRENT(short ushort)
{
    telemetry[54] = ((unsigned char *)&ushort)[1];
    telemetry[55] = ((unsigned char *)&ushort)[0];
}
short EPSTelemetryContainer::getCELLOUT_YP_CURRENT()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[56];
    ((unsigned char *)&ushort)[0] = telemetry[57];
    return ushort;
}
void EPSTelemetryContainer::setCELLOUT_YP_CURRENT(short ushort)
{
    telemetry[56] = ((unsigned char *)&ushort)[1];
    telemetry[57] = ((unsigned char *)&ushort)[0];
}
short EPSTelemetryContainer::getCELLOUT_YM_CURRENT()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[58];
    ((unsigned char *)&ushort)[0] = telemetry[59];
    return ushort;
}
void EPSTelemetryContainer::setCELLOUT_YM_CURRENT(short ushort)
{
    telemetry[58] = ((unsigned char *)&ushort)[1];
    telemetry[59] = ((unsigned char *)&ushort)[0];
}
short EPSTelemetryContainer::getCELLOUT_XP_CURRENT()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[60];
    ((unsigned char *)&ushort)[0] = telemetry[61];
    return ushort;
}
void EPSTelemetryContainer::setCELLOUT_XP_CURRENT(short ushort)
{
    telemetry[60] = ((unsigned char *)&ushort)[1];
    telemetry[61] = ((unsigned char *)&ushort)[0];
}
short EPSTelemetryContainer::getCELLOUT_XM_CURRENT()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[62];
    ((unsigned char *)&ushort)[0] = telemetry[63];
    return ushort;
}
void EPSTelemetryContainer::setCELLOUT_XM_CURRENT(short ushort)
{
    telemetry[62] = ((unsigned char *)&ushort)[1];
    telemetry[63] = ((unsigned char *)&ushort)[0];
}
short EPSTelemetryContainer::getCELLOUT_YP_VOLTAGE()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[64];
    ((unsigned char *)&ushort)[0] = telemetry[65];
    return ushort;
}
void EPSTelemetryContainer::setCELLOUT_YP_VOLTAGE(short ushort)
{
    telemetry[64] = ((unsigned char *)&ushort)[1];
    telemetry[65] = ((unsigned char *)&ushort)[0];
}
short EPSTelemetryContainer::getCELLOUT_YM_VOLTAGE()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[66];
    ((unsigned char *)&ushort)[0] = telemetry[67];
    return ushort;
}
void EPSTelemetryContainer::setCELLOUT_YM_VOLTAGE(short ushort)
{
    telemetry[66] = ((unsigned char *)&ushort)[1];
    telemetry[67] = ((unsigned char *)&ushort)[0];
}
short EPSTelemetryContainer::getCELLOUT_XP_VOLTAGE()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[68];
    ((unsigned char *)&ushort)[0] = telemetry[69];
    return ushort;
}
void EPSTelemetryContainer::setCELLOUT_XP_VOLTAGE(short ushort)
{
    telemetry[68] = ((unsigned char *)&ushort)[1];
    telemetry[69] = ((unsigned char *)&ushort)[0];
}
short EPSTelemetryContainer::getCELLOUT_XM_VOLTAGE()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[70];
    ((unsigned char *)&ushort)[0] = telemetry[71];
    return ushort;
}
void EPSTelemetryContainer::setCELLOUT_XM_VOLTAGE(short ushort)
{
    telemetry[70] = ((unsigned char *)&ushort)[1];
    telemetry[71] = ((unsigned char *)&ushort)[0];
}
short EPSTelemetryContainer::getCELLOUT_YP_TEMPERATURE()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[72];
    ((unsigned char *)&ushort)[0] = telemetry[73];
    return ushort;
}
void EPSTelemetryContainer::setCELLOUT_YP_TEMPERATURE(short ushort)
{
    telemetry[72] = ((unsigned char *)&ushort)[1];
    telemetry[73] = ((unsigned char *)&ushort)[0];
}
short EPSTelemetryContainer::getCELLOUT_YM_TEMPERATURE()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[74];
    ((unsigned char *)&ushort)[0] = telemetry[75];
    return ushort;
}
void EPSTelemetryContainer::setCELLOUT_YM_TEMPERATURE(short ushort)
{
    telemetry[74] = ((unsigned char *)&ushort)[1];
    telemetry[75] = ((unsigned char *)&ushort)[0];
}
short EPSTelemetryContainer::getCELLOUT_XP_TEMPERATURE()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[76];
    ((unsigned char *)&ushort)[0] = telemetry[77];
    return ushort;
}
void EPSTelemetryContainer::setCELLOUT_XP_TEMPERATURE(short ushort)
{
    telemetry[76] = ((unsigned char *)&ushort)[1];
    telemetry[77] = ((unsigned char *)&ushort)[0];
}
short EPSTelemetryContainer::getCELLOUT_XM_TEMPERATURE()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[78];
    ((unsigned char *)&ushort)[0] = telemetry[79];
    return ushort;
}
void EPSTelemetryContainer::setCELLOUT_XM_TEMPERATURE(short ushort)
{
    telemetry[78] = ((unsigned char *)&ushort)[1];
    telemetry[79] = ((unsigned char *)&ushort)[0];
}
short EPSTelemetryContainer::getMPPT_YP_CURRENT()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[80];
    ((unsigned char *)&ushort)[0] = telemetry[81];
    return ushort;
}
void EPSTelemetryContainer::setMPPT_YP_CURRENT(short ushort)
{
    telemetry[80] = ((unsigned char *)&ushort)[1];
    telemetry[81] = ((unsigned char *)&ushort)[0];
}
short EPSTelemetryContainer::getMPPT_YM_CURRENT()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[82];
    ((unsigned char *)&ushort)[0] = telemetry[83];
    return ushort;
}
void EPSTelemetryContainer::setMPPT_YM_CURRENT(short ushort)
{
    telemetry[82] = ((unsigned char *)&ushort)[1];
    telemetry[83] = ((unsigned char *)&ushort)[0];
}
short EPSTelemetryContainer::getMPPT_XP_CURRENT()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[84];
    ((unsigned char *)&ushort)[0] = telemetry[85];
    return ushort;
}
void EPSTelemetryContainer::setMPPT_XP_CURRENT(short ushort)
{
    telemetry[84] = ((unsigned char *)&ushort)[1];
    telemetry[85] = ((unsigned char *)&ushort)[0];
}
short EPSTelemetryContainer::getMPPT_XM_CURRENT()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[86];
    ((unsigned char *)&ushort)[0] = telemetry[87];
    return ushort;
}
void EPSTelemetryContainer::setMPPT_XM_CURRENT(short ushort)
{
    telemetry[86] = ((unsigned char *)&ushort)[1];
    telemetry[87] = ((unsigned char *)&ushort)[0];
}
short EPSTelemetryContainer::getMPPT_YP_VOLTAGE()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[88];
    ((unsigned char *)&ushort)[0] = telemetry[89];
    return ushort;
}
void EPSTelemetryContainer::setMPPT_YP_VOLTAGE(short ushort)
{
    telemetry[88] = ((unsigned char *)&ushort)[1];
    telemetry[89] = ((unsigned char *)&ushort)[0];
}
short EPSTelemetryContainer::getMPPT_YM_VOLTAGE()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[90];
    ((unsigned char *)&ushort)[0] = telemetry[91];
    return ushort;
}
void EPSTelemetryContainer::setMPPT_YM_VOLTAGE(short ushort)
{
    telemetry[90] = ((unsigned char *)&ushort)[1];
    telemetry[91] = ((unsigned char *)&ushort)[0];
}
short EPSTelemetryContainer::getMPPT_XP_VOLTAGE()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[92];
    ((unsigned char *)&ushort)[0] = telemetry[93];
    return ushort;
}
void EPSTelemetryContainer::setMPPT_XP_VOLTAGE(short ushort)
{
    telemetry[92] = ((unsigned char *)&ushort)[1];
    telemetry[93] = ((unsigned char *)&ushort)[0];
}
short EPSTelemetryContainer::getMPPT_XM_VOLTAGE()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[94];
    ((unsigned char *)&ushort)[0] = telemetry[95];
    return ushort;
}
void EPSTelemetryContainer::setMPPT_XM_VOLTAGE(short ushort)
{
    telemetry[94] = ((unsigned char *)&ushort)[1];
    telemetry[95] = ((unsigned char *)&ushort)[0];
}
short EPSTelemetryContainer::getPANELOUT_YP_VOLTAGE()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[96];
    ((unsigned char *)&ushort)[0] = telemetry[97];
    return ushort;
}
void EPSTelemetryContainer::setPANELOUT_YP_VOLTAGE(short ushort)
{
    telemetry[96] = ((unsigned char *)&ushort)[1];
    telemetry[97] = ((unsigned char *)&ushort)[0];
}
short EPSTelemetryContainer::getPANELOUT_YM_VOLTAGE()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[98];
    ((unsigned char *)&ushort)[0] = telemetry[99];
    return ushort;
}
void EPSTelemetryContainer::setPANELOUT_YM_VOLTAGE(short ushort)
{
    telemetry[98] = ((unsigned char *)&ushort)[1];
    telemetry[99] = ((unsigned char *)&ushort)[0];
}
short EPSTelemetryContainer::getPANELOUT_XP_VOLTAGE()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[100];
    ((unsigned char *)&ushort)[0] = telemetry[101];
    return ushort;
}
void EPSTelemetryContainer::setPANELOUT_XP_VOLTAGE(short ushort)
{
    telemetry[100] = ((unsigned char *)&ushort)[1];
    telemetry[101] = ((unsigned char *)&ushort)[0];
}
short EPSTelemetryContainer::getPANELOUT_XM_VOLTAGE()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[102];
    ((unsigned char *)&ushort)[0] = telemetry[103];
    return ushort;
}
void EPSTelemetryContainer::setPANELOUT_XM_VOLTAGE(short ushort)
{
    telemetry[102] = ((unsigned char *)&ushort)[1];
    telemetry[103] = ((unsigned char *)&ushort)[0];
}
short EPSTelemetryContainer::getPANELOUT_YP_CURRENT()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[104];
    ((unsigned char *)&ushort)[0] = telemetry[105];
    return ushort;
}
void EPSTelemetryContainer::setPANELOUT_YP_CURRENT(short ushort)
{
    telemetry[104] = ((unsigned char *)&ushort)[1];
    telemetry[105] = ((unsigned char *)&ushort)[0];
}
short EPSTelemetryContainer::getPANELOUT_YM_CURRENT()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[106];
    ((unsigned char *)&ushort)[0] = telemetry[107];
    return ushort;
}
void EPSTelemetryContainer::setPANELOUT_YM_CURRENT(short ushort)
{
    telemetry[106] = ((unsigned char *)&ushort)[1];
    telemetry[107] = ((unsigned char *)&ushort)[0];
}
short EPSTelemetryContainer::getPANELOUT_XP_CURRENT()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[108];
    ((unsigned char *)&ushort)[0] = telemetry[109];
    return ushort;
}
void EPSTelemetryContainer::setPANELOUT_XP_CURRENT(short ushort)
{
    telemetry[108] = ((unsigned char *)&ushort)[1];
    telemetry[109] = ((unsigned char *)&ushort)[0];
}
short EPSTelemetryContainer::getPANELOUT_XM_CURRENT()
{
    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[110];
    ((unsigned char *)&ushort)[0] = telemetry[111];
    return ushort;
}
void EPSTelemetryContainer::setPANELOUT_XM_CURRENT(short ushort)
{
    telemetry[110] = ((unsigned char *)&ushort)[1];
    telemetry[111] = ((unsigned char *)&ushort)[0];
}
